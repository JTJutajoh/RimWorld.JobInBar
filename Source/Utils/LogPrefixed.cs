using System;
using System.Reflection;

// ReSharper disable once CheckNamespace
namespace JobInBar.DarkLog;

/// <summary>
///     A utility class for my mods that helps automate some debug logging stuff.
///     Mostly just a wrapper for Verse.Log.<br />
///     Adds a prefix in format "[packageid]" to the start of each log.<br />
///     Expects modInst to be set at mod initialization. If not set, defaults to the assembly name.<br />
///     Also allows setting a PrefixColor.
/// </summary>
[StaticConstructorOnStartup]
internal static class LogPrefixed
{
    private static Mod? _modInstance;

    static LogPrefixed()
    {
    }

    private static string PackageId =>
        (_modInstance?.Content?.PackageIdPlayerFacing ?? Assembly.GetExecutingAssembly().GetName().Name)!;

    internal static string PrefixColor { get; set; } = "cyan";

    private static string PrefixedMessage(string message)
    {
        return $"<color={PrefixColor}>[{PackageId}]</color> {message}";
    }

    internal static void Initialize(Mod mod, string prefixColor = "cyan")
    {
        _modInstance = mod;
        PrefixColor = prefixColor.ToLower();
        foreach (var assembly in mod.Content?.assemblies?.loadedAssemblies!)
            Message($"{assembly.GetName().Name} v{assembly.GetName().Version} initializing...");
#if DEBUG
        Warning("This is a debug build of the mod with trace logs included.");
        Error("DEBUG LOGSPAM ENABLED!!!");
#endif
    }

    internal static void Error(string text)
    {
        Verse.Log.Error(PrefixedMessage(text));
    }

    internal static void ErrorOnce(string text, string key)
    {
        Verse.Log.ErrorOnce(PrefixedMessage(text), key.GetHashCode());
    }

    internal static void Warning(string text)
    {
        Verse.Log.Warning(PrefixedMessage(text));
    }

    /// <summary>
    ///     Logs a formatted exception after it has been caught.
    /// </summary>
    /// <param name="e">The exception object</param>
    /// <param name="extraMessage">
    ///     Optional extra string to add to the logged exception, for example to help identify
    ///     the likely cause based on where it was caught.
    /// </param>
    /// <param name="once">
    ///     If true, only the first instance of the exception will be logged,
    ///     the hash will be generated by the stacktrace string.
    /// </param>
    internal static void Exception(Exception e, string? extraMessage = null, bool once = false)
    {
        var message =
            $"{e.GetType()}: \"{e.Message}\"\nPlease test with no other mods installed before reporting to the modder. More details:\n{extraMessage ?? "" + "\n"}\n\nStacktrace: {e.StackTrace}";
        if (once)
        {
            var hash = e.StackTrace?.GetHashCode() ?? -1;
            ErrorOnce(message, hash.ToString());
            WarningOnce(
                "Exception silenced to prevent logspam. The error may still be occurring though, restarting the game is recommended.",
                hash.ToString());
        }
        else
        {
            Error(message);
        }
    }

    internal static void WarningOnce(string text, string key)
    {
#if v1_4 || v1_5 || v1_6
        Verse.Log.WarningOnce(PrefixedMessage(text), key.GetHashCode());
#else
            Verse.Log.Warning(PrefixedMessage(text));
#endif
    }

    internal static void Message(string text)
    {
        Verse.Log.Message(PrefixedMessage(text));
    }

    /// <summary>
    ///     Sends a debug message, but only if project was built with the DEBUG constant defined.
    ///     Use this for logspam.
    /// </summary>
    /// <param name="text">The message to log</param>
    /// <param name="warning">If true, sends as a yellow warning message for visibility.</param>
    internal static void Trace(string text, bool warning = false)
    {
        // Non-Debug builds have no method body for this
#if DEBUG
        text = $"<color='yellow'>[TRACE]</color> {text}";
        if (warning)
            Warning(text);
        else
            Message(text);
#endif
    }
}
